name: DESDEO-emo 

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip

  test:
    #needs: linting
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.8", "3.9" ]
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #    add matrix specifics and run test suite
      #----------------------------------------------

      - name: Run tests
        id: run-tests
        run: |
          source .venv/bin/activate
          retries=10
          failed_tests=""

          # Run all tests
          pytest tests/
          exit_code=$?

          if [ $exit_code -eq 0 ]; then
            echo "All tests passed!"
          else
            for i in $(seq 1 $retries); do
              # Run only the failed tests
              pytest $failed_tests
              exit_code=$?

              if [ $exit_code -eq 0 ]; then
                echo "All tests passed!"
                break  # All tests passed, exit the loop
              fi

              # Get the failed test files from the pytest output
              failed_files=$(pytest --collect-only $failed_tests | awk '/<Module/ {print $NF}')

              # Build the test file pattern for rerunning failed tests
              test_files=""
              for file in $failed_files; do
                test_files+=" tests/$file"
              done

              failed_tests=$test_files

              echo "Retrying failed tests... (Attempt $i)"
            done
          fi
